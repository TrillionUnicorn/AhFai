version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ahfai}
      POSTGRES_USER: ${POSTGRES_USER:-ahfai}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ahfai}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Ollama AI Service
  ollama:
    image: ollama/ollama:latest
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - app-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-ahfai}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-ahfai}
      OLLAMA_HOST: http://ollama:11434
      SECRET_KEY: ${SECRET_KEY}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      ENVIRONMENT: production
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
      ollama:
        condition: service_started
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
      replicas: 2

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NODE_ENV: production
    networks:
      - app-network
    depends_on:
      - backend
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - app-network
    depends_on:
      - frontend
      - backend
    restart: always

volumes:
  postgres_data:
  ollama_data:

networks:
  app-network:
    driver: bridge
